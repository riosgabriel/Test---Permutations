import random
import string
import unittest
from functools import reduce
from math import factorial

import hypothesis.strategies as st
from hypothesis import given  # , settings, Verbosity
from permutations import combos


# taken from: https://www.calculatorsoup.com/calculators/discretemathematics/permutations.php
def calculate_permutations(n):
   return reduce(lambda acc, x: acc + (factorial(n) / factorial(n - x)), range(n, 0, -1), 0)


class MyTestCase(unittest.TestCase):
   blacklist_characters = random.choices(string.ascii_letters, k=5)

   # Uncomment this line to test texts with size greater than 8, where X > 200 (ms)
   # @settings(deadline=X)
   # Uncomment this line to see the values generated by the lib
   # @settings(verbosity=Verbosity.verbose)
   @given(st.text(max_size=8))
   def test_size_of_permutations(self, s):
       expected_permutations_size = calculate_permutations(len(s))
       permutations_size = len(combos(s))

       self.assertEqual(permutations_size, expected_permutations_size)

   # Uncomment this line to test texts with size greater than 8, where X > 200 (ms)
   # @settings(deadline=X)
   # Uncomment this line to see the values generated by the lib
   # @settings(verbosity=Verbosity.verbose)
   @given(
       text=st.text(
           alphabet=st.characters(blacklist_characters=blacklist_characters),
           max_size=8
       ),
   )
   def test_permutations_does_not_contains_blacklisted_characters(self, text):
       permutations = combos(text)
       for p in permutations:
           for ch in self.blacklist_characters:
               self.assertNotIn(ch, p)

   # Uncomment this line to test texts with size greater than 8, where X > 200 (ms)
   # @settings(deadline=X)
   # Uncomment this line to see the values generated by the lib
   # @settings(verbosity=Verbosity.verbose)
   @given(text=st.text(max_size=8))
   def test_when_text_does_not_contains_duplicate_so_permutations_also_not_contains_duplicate(self, text):
       text_without_duplicated = "".join(set(text))
       expected_permutations_size = calculate_permutations(len(text_without_duplicated))

       permutations = combos(text_without_duplicated)
       permutations_size = len(permutations)
       set_permutations_size = len(set(permutations))

       self.assertEqual(permutations_size, set_permutations_size)
       self.assertEqual(set_permutations_size, expected_permutations_size)

   # Uncomment this line to test texts with size greater than 6, where X > 200 (ms)
   # @settings(deadline=X)
   # Uncomment this line to see the values generated by the lib
   # @settings(verbosity=Verbosity.verbose)
   @given(text=st.text(max_size=6))
   def test_contains_subset_of_permutations(self, text):
       permutations = combos(text)
       permutation_superset = combos(text + random.choice(string.ascii_letters))

       for p in permutations:
           self.assertIn(p, permutation_superset)


if __name__ == '__main__':
   unittest.main()

